# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt_Build

# on:
  # schedule:
    # - cron: 0 20 * * *
  # release:
    # types: [published]

on:
  push:
    branches: 
      - openwrt-22.03
      - master
  schedule:
    - cron: 00 03 * * 1

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
#          ref: openwrt-22.03

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
      - name: Update feeds
        run: |
          ./scripts/feeds update -a && ./scripts/feeds install -a && sed -i $'s/# /       /g' feeds/packages/utils/dockerd/files/etc/config/dockerd
      - name: Add custom packages
        run: |
          git clone --depth=1 https://github.com/xiaorouji/openwrt-passwall.git package/crackself/openwrt-passwall
          git clone --depth=1 https://github.com/xiaorouji/openwrt-passwall2.git package/crackself/openwrt-passwall2
          git clone --depth=1 -b master https://github.com/vernesong/OpenClash.git package/crackself/OpenClash
          git clone --depth=1 https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic package/crackself/luci-app-unblockmusic
      - name: Generate configuration file
        run: |
          cp .github/workflows/22.03.config .config
          #cp .github/workflows/master-vpn-v2.config .config
          make defconfig
      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
      - name: Prepare po2lmo
        run: |
          pushd package/crackself/OpenClash/luci-app-openclash/tools/po2lmo
          make && sudo -E make install
          popd
          which po2lmo
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
      - name: Prepare artifact
        run: |
          pwd
          ls
          mkdir -p {artifact,artifact/firmware,artifact/package,artifact/buildinfo}
          #rm -rfv $(find bin/targets -type d -name "packages")
          mv -fv $(find bin/targets -type f -name "*.buildinfo" -o -name "*.manifest") artifact/buildinfo/
          cp -rfv $(find bin/targets -type f) artifact/firmware/
          #cp -rfv $(find bin/packages -type f -name "*.ipk") artifact/package/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: artifact/buildinfo/

      #- name: Deliver package
        #uses: actions/upload-artifact@v2
        #with:
          #name: OpenWrt_package
          #path: artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: bin/targets/
  

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.RELEASE }}
          file: artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
